//! `SeaORM` Entity. Generated by sea-orm-hap_platform-metadata 0.11.3
use sea_orm::{FromJsonQueryResult, JsonValue};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use serde_aux::prelude::deserialize_number_from_string;

use miot_proto::proto::miio_proto::MiotSpecId;
use target_hap::types::HapCharInfo;
use xiaomi_ble_packet::ble_value_type::MiBleValueType;

use crate::unit_convertor::UnitConvertorType;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "hap_characteristic"
    }
}

#[derive(
EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MappingMethod {
    /// 不映射
    None = -1,
    /// miot spec 设备属性映射
    PropMapping = 1,
    /// 固定值
    FixValue = 2,
    /// 模型接管
    AccessoryModel = 4,
    /// js context sys.dev.get_ps
    /// 当前设备读取属性
    /// 读取数值-> dev.get_ps()
    JsScript = 3,
}


#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize, FromJsonQueryResult)]
#[serde(tag = "type")]
pub enum MappingParam {
    /// miot spec 设备转控制器
    PropMapping(PropMappingParam),
    JsScript(JsScriptParam),
    /// 低功耗蓝牙设备转传感器
    BleToSensor(BleToSensorParam),
}

#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub struct JsScriptParam {
    pub name: String,
}


/// 映射的蓝牙值类型
#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub enum DbBleValueType {
    Temperature,
    Humidity,
    Battery,
}

impl Into<MiBleValueType> for DbBleValueType {
    fn into(self) -> MiBleValueType {
        match self {
            DbBleValueType::Temperature => MiBleValueType::Temperature,
            DbBleValueType::Humidity => MiBleValueType::Humidity,
            DbBleValueType::Battery => MiBleValueType::Battery,
        }
    }
}


#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub struct BleToSensorParam {
    pub(crate) ble_value_type: DbBleValueType,
}

#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub struct PropMappingParam {
    /// 属性
    #[serde(deserialize_with = "deserialize_number_from_string")]
    pub siid: i32,
    #[serde(deserialize_with = "deserialize_number_from_string")]
    pub piid: i32,
}

impl Into<MiotSpecId> for PropMappingParam {
    fn into(self) -> MiotSpecId {
        MiotSpecId::new(self.siid, self.piid)
    }
}

#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize, FromJsonQueryResult)]
pub struct HapCharInfoQueryResult(pub HapCharInfo);


#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub cid: i64,
    pub service_id: i64,
    pub disabled: bool,
    pub name: Option<String>,
    pub characteristic_type: String,
    /// 服务的映射类型
    // 单位转换器
    pub convertor: Option<String>,
    pub convertor_param: Option<JsonValue>,
    // pub mapping_method: MappingMethod,
    // pub mapping_param: Option<MappingParam>,

    pub info: HapCharInfoQueryResult,
    pub memo: Option<String>,

}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Cid,
    ServiceId,
    Name,
    Disabled,
    CharacteristicType,
    // MappingParam,
    // MappingMethod,
    Convertor,
    ConvertorParam,
    Info,
    Memo,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Cid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    HapService
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Cid => ColumnType::BigInteger.def(),
            Self::ServiceId => ColumnType::BigInteger.def().indexed(),
            Self::Disabled => ColumnType::Boolean.def(),
            Self::CharacteristicType => ColumnType::String(Some(64)).def(),
            Self::Name => ColumnType::String(Some(64)).def().null(),
            // Self::MappingParam => ColumnType::String(None).def().null(),
            // Self::MappingMethod => ColumnType::Integer.def(),

            Self::Convertor => ColumnType::String(Some(64)).def().null(),
            Self::ConvertorParam => ColumnType::String(None).def().null(),
            Self::Info => ColumnType::String(None).def().null(),
            Self::Memo => ColumnType::String(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Relation::HapService => {
                Entity::belongs_to(super::hap_service::Entity)
                    .from(Column::ServiceId)
                    .to(super::hap_service::Column::Id)
                    .into()
            }
        }
    }
}

impl Related<super::hap_service::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HapService.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {}