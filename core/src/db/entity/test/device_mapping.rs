//! `SeaORM` Entity. Generated by sea-orm-hap_platform-metadata 0.11.3

use sea_orm::entity::prelude::*;
use sea_orm::FromJsonQueryResult;
use serde::{Deserialize, Serialize};
use crate::hap::hap_type::MappingHapType;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "device_mapping"
    }
}


// The custom struct must derive `FromJsonQueryResult`, `Serialize` and `Deserialize`
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
pub struct ExtraConfig {}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
pub struct MappingConfig {}

#[derive(
EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MappingTo {
    Hap = 1,
}

#[derive(
EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MappingDeviceType {
    /// 米家wifi设备
    MiWifiDevice = 1,
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    /// 配件的id
    pub aid: Option<i32>,
    /// 设备类型
    pub device_type: MappingDeviceType,
    /// 映射名称
    pub device_name: Option<i32>,
    /// 映射的配置
    pub config: Option<MappingConfig>,
    /// 网关设备的aid
    pub gateway_device_id: Option<i64>,
    /// 设备id
    pub device_id: String,
    pub extra: Option<ExtraConfig>,
    /// 映射成hap的类型
    pub hap_type: Option<MappingHapType>,
    pub mapping_to: MappingTo,
    /// 是否映射
    pub is_mapping: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Aid,
    DeviceType,
    DeviceName,
    Config,
    GatewayDeviceId,
    DeviceId,
    Extra,

    HapType,
    MappingTo,
    IsMapping,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Aid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}


impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Aid => ColumnType::Integer.def().null(),
            Self::DeviceType => ColumnType::Integer.def(),
            Self::DeviceName => ColumnType::Integer.def().null(),
            Self::Config => ColumnType::Json.def().null(),
            Self::GatewayDeviceId => ColumnType::BigInteger.def().null(),
            Self::DeviceId => ColumnType::String(Some(64)).def(),
            Self::Extra => ColumnType::Json.def(),
            Self::HapType => ColumnType::Integer.def().null(),
            Self::MappingTo => ColumnType::Integer.def(),
            Self::IsMapping => ColumnType::Boolean.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
