//! `SeaORM` Entity. Generated by sea-orm-hap_platform-metadata 0.11.3

use std::str::FromStr;
use sea_orm::entity::prelude::*;
use sea_orm::{FromJsonQueryResult, JsonValue};
use serde::{Deserialize, Serialize};
use strum_macros::{AsRefStr, EnumString};

use miot_proto::device::miot_spec_device::DeviceInfo;
use miot_proto::proto::miio_proto::MiotSpecId;
use xiaomi_ble_packet::ble_value_type::MiBleValueType;

use crate::db::entity::common::PropertyVec;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "iot_device"
    }
}

/// 接入方式
#[derive(EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize, )]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum IotDeviceType {
    /// 米家wifi设备
    MiWifiDevice = 1,
    /// 米家网关设备
    MiGatewayDevice = 2,
    /// 蓝牙设备
    MiBleDevice = 3,
    /// 米家mesh设备
    MiMeshDevice = 4,
    /// 米家Zigbee
    MiZigbeeDevice = 5,
    /// 米家云端设备
    MiCloudDevice = 6,
    /// 米家网关代理设备
    GatewayProxy = 7,
    /// 本地蓝牙
    NativeBle = 8,
    // Bl
}

impl IotDeviceType {
    pub fn require_gw(&self) -> bool {
        match self {
            IotDeviceType::GatewayProxy => true,
            IotDeviceType::MiZigbeeDevice => true,
            IotDeviceType::MiMeshDevice => true,
            IotDeviceType::MiBleDevice => true,
            _ => false
        }
    }
}

/// 来源设备平台
#[derive(Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize, AsRefStr, EnumString)]
// #[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum SourcePlatform {
    #[strum(serialize = "mijia")]
    Mijia,
    /// 本地蓝牙
    #[strum(serialize = "ble-native")]
    BleNative,
}

// impl FromStr for SourcePlatform {
//     type Err = anyhow::Error;
//
//     fn from_str(s: &str) -> Result<Self, Self::Err> {
//         match s {
//             "mijia" => Ok(SourcePlatform::Mijia),
//             "ble-monitor" => Ok(SourcePlatform::NativeBle),
//             _ => Err(anyhow::anyhow!("不支持的平台"))
//         }
//     }
// }

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
#[serde(tag = "type")]
pub enum DeviceParam {
    WifiDeviceParam,
    MiGatewayParam,
    MiCloudParam,
    BleParam(BleParam),
    MeshParam,
}


#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct MiotSpecIdType {
    pub siid: i32,
    pub piid: i32,
    pub r#type: MiBleValueType,
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct BleParam {
    /// 设备信息
    #[serde(flatten)]
    pub info: DeviceInfo,
    /// 规则
    pub mapping: Vec<MiotSpecIdType>,
}

impl BleParam {
    pub fn get_mapping(&self) -> bimap::BiMap<MiotSpecId, MiBleValueType> {
        let mut map = bimap::BiMap::new();
        for item in self.mapping.iter() {
            map.insert(MiotSpecId::new(item.siid, item.piid), item.r#type);
        }
        map
    }
}

#[test]
fn test_ble_param() {
    let str = r#"
    {"did":"blt.3.1g8f9gmps4o02","firmware_revision":null,"localip":null,"mac":"","manufacturer":null,"model":"miaomiaoce.sensor_ht.t1","name":"温湿度传感器","serial_number":null,"software_revision":null,"token":"","type":"BleParam","mapping":[{"siid":2,"piid":1,"type":"Temperature"}]}
    "#;
    let a = serde_json::from_str::<DeviceParam>(str);
    println!("{:?}", a);
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub device_id: i64,
    /// 设备tag
    pub tag: Option<String>,
    /// 接入方式
    pub device_type: String,
    ///接入参数
    pub params: JsonValue,
    pub gateway_id: Option<i64>,
    pub name: String,
    pub memo: Option<String>,
    pub disabled: bool,

    pub source_platform: String,
    pub source_id: Option<String>,

    // /// 轮询时间
    // pub poll_interval: i32,
    // /// 读写超时时间
    // pub timeout: i32,
    // pub poll_properties: PropertyVec,

    // /// 定义属性
    // pub props: Option<String>,
    // /// 定义服务
    // pub services: Option<String>,
    // /// 定义事件
    // pub events: Option<String>,
    //
    ///使用的模板id
    pub temp_id: Option<String>,
    pub temp_version: Option<String>,
    /// 模板标识
    pub temp_batch_id: Option<i64>,
    pub update_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    DeviceId,
    Tag,
    DeviceType,
    Params,
    GatewayId,
    Disabled,
    Name,
    Memo,
    SourcePlatform,
    SourceId,

    // PollInterval,
    // Timeout,
    // PollProperties,

    TempId,
    TempVersion,
    TempBatchId,
    UpdateAt,
    // Props,
    // Services,
    // Events,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    DeviceId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::hap_accessory::Entity")]
    HapAccessory,
}

impl Related<super::hap_accessory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HapAccessory.def()
    }
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::DeviceId => ColumnType::BigInteger.def(),
            Self::Tag => ColumnType::String(None).def().null(),
            Self::DeviceType => ColumnType::Integer.def(),
            Self::SourcePlatform => ColumnType::String(Some(64)).def(),
            Self::Params => ColumnType::Json.def().null(),
            Self::GatewayId => ColumnType::BigInteger.def().null(),
            Self::Disabled => ColumnType::Boolean.def(),
            Self::Name => ColumnType::String(None).def().null(),
            Self::Memo => ColumnType::String(None).def().null(),
            Self::SourceId => ColumnType::String(None).def().null(),

            Self::TempId => ColumnType::BigInteger.def().null(),
            Self::TempVersion => ColumnType::String(None).def().null(),
            Self::UpdateAt => ColumnType::Timestamp.def(),
            Self::TempBatchId => ColumnType::BigInteger.def(),

            // Self::PollInterval => ColumnType::Integer.def(),
            // Self::Timeout => ColumnType::Integer.def(),
            // Self::PollProperties => ColumnType::String(None).def(),
            // Self::Props => ColumnType::String(None).def().null(),
            // Self::Services => ColumnType::String(None).def().null(),
            // Self::Events => ColumnType::String(None).def().null(),
        }
    }
}


impl ActiveModelBehavior for ActiveModel {}
