//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3


use sea_orm::ActiveValue::Set;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "miot_device"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub did: String,
    pub token: String,
    pub name: String,
    pub model: String,
    pub localip: Option<String>,
    pub  beacon_key: Option<String>,
    pub mac: Option<String>,
    #[serde(rename = "isOnline")]
    pub is_online: bool,
    pub user_id: String,
    pub update_at: DateTimeUtc,
    pub full: serde_json::Value,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Did,
    Token,
    Name,
    Model,
    IsOnline,
    Full,
    UserId,
    UpdateAt,
    BeaconKey,
    Localip,
    Mac,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Did,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Did => ColumnType::String(None).def().null(),
            Self::Token => ColumnType::String(None).def().null(),
            Self::Name => ColumnType::String(None).def().null(),
            Self::Localip => ColumnType::String(None).def().null(),
            Self::Mac => ColumnType::String(None).def().null(),
            Self::BeaconKey => ColumnType::String(None).def().null(),
            Self::Model => ColumnType::String(None).def().null(),
            Self::IsOnline => ColumnType::Integer.def().null(),
            Self::Full => ColumnType::String(None).def().null(),
            Self::UserId => ColumnType::String(None).def().null(),
            Self::UpdateAt => ColumnType::Timestamp.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            did: Default::default(),
            token: Default::default(),
            name: Default::default(),
            model: Default::default(),
            localip: Default::default(),
            beacon_key: Default::default(),
            mac: Default::default(),
            is_online: Default::default(),
            user_id: Default::default(),
            update_at: Set(chrono::Utc::now()),
            full: Default::default(),

        }
    }
}
