//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use sea_orm::Set;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;


#[derive(EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize, )]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MiAccountStatus {
    /// 未激活
    NotLogin = 0,
    /// 正常
    Normal = 1,
    /// 过期
    Expire = 2,
}


impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "mi_account"
    }
}


#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub account: String,
    pub password: String,
    pub status: MiAccountStatus,
    /// 更新时间
    pub update_at: DateTimeUtc,
    pub memo: Option<String>,
    /// 最后登入时间
    pub last_login_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Account,
    Password,
    Status,
    Memo,
    UpdateAt,
    LastLoginAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Account,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Account => ColumnType::String(None).def(),
            Self::Password => ColumnType::String(None).def(),
            Self::Memo => ColumnType::String(None).def().null(),
            Self::UpdateAt => ColumnType::Timestamp.def(),
            Self::LastLoginAt => ColumnType::Timestamp.def().null(),
            Self::Status => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            account: Default::default(),
            password: Default::default(),
            status: Default::default(),
            update_at: Set(chrono::Utc::now()),
            last_login_at: Default::default(),
            memo: Default::default(),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {}