//! `SeaORM` Entity. Generated by sea-orm-hap_metadata 0.11.3

use sea_orm::entity::prelude::*;
use sea_orm::{FromJsonQueryResult, JsonValue};
use serde::{Deserialize, Serialize};
use crate::hap::hap_type::MappingHapType;
use serde_aux::prelude::deserialize_number_from_string;
use miot_spec::device::ble::value_types::{BleValueType};
use crate::hap::unit_convertor::{ConvertorParamType, UnitConvertor};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "hap_characteristic"
    }
}

#[derive(
EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize,
)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MappingMethod {
    /// 不映射
    None = -1,
    /// miot spec 设备属性映射
    PropMapping = 1,
    /// js context sys.dev.get_ps
    /// 当前设备读取属性
    /// 读取数值-> dev.get_ps()
    JsScript = 3,
}


#[derive(Clone, Debug, Copy, PartialEq, Eq, Default, Deserialize, Serialize, FromJsonQueryResult)]
pub struct Property {
    #[serde(deserialize_with = "deserialize_number_from_string")]
    pub siid: i32,
    #[serde(deserialize_with = "deserialize_number_from_string")]
    pub piid: i32,
    //单位
}

#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize, FromJsonQueryResult)]
#[serde(tag = "type")]
pub enum MappingParam {
    /// miot spec 设备转控制器
    MIotSpec(MiotSpecParam),
    JsScript(JsScriptParam),
    /// 低功耗蓝牙设备转传感器
    BleToSensor(BleToSensorParam),
}

#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub struct JsScriptParam {
    pub name: String,
}


/// 映射的蓝牙值类型
#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub enum DbBleValueType {
    Temperature,
    Humidity,
    Battery,
}

impl Into<BleValueType> for DbBleValueType {
    fn into(self) -> BleValueType {
        match self {
            DbBleValueType::Temperature => BleValueType::Temperature,
            DbBleValueType::Humidity => BleValueType::Humidity,
            DbBleValueType::Battery => BleValueType::Battery,
        }
    }
}


#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub struct BleToSensorParam {
    pub(crate) ble_value_type: DbBleValueType,
}

#[derive(Clone, Debug, Eq, PartialEq, Deserialize, Serialize)]
pub struct MiotSpecParam {
    /// 属性
    pub property: Property,
}


#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub cid: i64,
    pub service_id: i64,
    pub disabled: bool,
    pub name: Option<String>,
    pub characteristic_type: MappingHapType,
    /// 服务的映射类型
    pub mapping_method: MappingMethod,
    pub mapping_param: Option<MappingParam>,
    // pub mapping_property: Option<Property>,
    pub fixed_value: Option<String>,
    pub format: String,
    pub unit: Option<String>,
    pub min_value: Option<JsonValue>,
    pub max_value: Option<JsonValue>,
    pub tag: Option<String>,
    pub max_len: Option<JsonValue>,
    /// 单位转换器
    pub unit_convertor: Option<UnitConvertor>,
    pub convertor_param: Option<ConvertorParamType>,

}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Cid,
    ServiceId,
    MappingParam,
    Name,
    Tag,
    Disabled,
    CharacteristicType,
    MappingMethod,
    FixedValue,
    Format,
    Unit,
    MinValue,
    MaxValue,
    MaxLen,
    UnitConvertor,
    ConvertorParam,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Cid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    HapService
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Cid => ColumnType::BigInteger.def(),
            Self::ServiceId => ColumnType::BigInteger.def(),
            Self::Disabled => ColumnType::Boolean.def(),
            Self::MappingParam => ColumnType::String(None).def().null(),
            Self::FixedValue => ColumnType::String(None).def().null(),
            Self::Name => ColumnType::String(Some(64)).def().null(),
            Self::Tag => ColumnType::String(Some(64)).def().null(),
            Self::Format => ColumnType::String(None).def().null(),
            Self::Unit => ColumnType::String(None).def().null(),
            Self::MinValue => ColumnType::String(None).def().null(),
            Self::MaxValue => ColumnType::String(None).def().null(),
            Self::MaxLen => ColumnType::String(None).def().null(),
            Self::MappingMethod => ColumnType::Integer.def(),
            Self::CharacteristicType => ColumnType::Integer.def(),
            Self::UnitConvertor => ColumnType::Integer.def(),
            Self::ConvertorParam => ColumnType::String(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Relation::HapService => {
                Entity::belongs_to(super::hap_service::Entity)
                    .from(Column::ServiceId)
                    .to(super::hap_service::Column::Id)
                    .into()
            }
        }
    }
}

impl Related<super::hap_service::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HapService.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
