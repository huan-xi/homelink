//! `SeaORM` Entity. Generated by sea-orm-hap_metadata 0.11.3

use sea_orm::ActiveValue::Set;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use strum::IntoEnumIterator;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

#[derive(EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize, )]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum BridgeCategory {
    Other = 1,
    Bridge = 2,
    Fan = 3,
    GarageDoorOpener = 4,
    Lightbulb = 5,
    DoorLock = 6,
    Outlet = 7,
    Switch = 8,
    Thermostat = 9,
    Sensor = 10,
    SecuritySystem = 11,
    Door = 12,
    Window = 13,
    WindowCovering = 14,
    ProgrammableSwitch = 15,
    RangeExtender = 16,
    IpCamera = 17,
    VideoDoorbell = 18,
    AirPurifier = 19,
    AirHeater = 20,
    AirConditioner = 21,
    AirHumidifier = 22,
    AirDehumidifier = 23,
    AppleTv = 24,
    Speaker = 26,
    Airport = 27,
    Sprinkler = 28,
    Faucet = 29,
    ShowerHead = 30,
    Television = 31,
    TargetController = 32,
    WiFiRouter = 33,
    AudioReceiver = 34,
    TelevisionSetTopBox = 35,
    TelevisionStreamingStick = 36,
}

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "hap_bridge"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub bridge_id: i64,
    pub pin_code: i64,
    pub port: i64,
    pub category: BridgeCategory,
    pub name: String,
    pub mac: String,
    pub setup_id: String,
    pub disabled: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    BridgeId,
    Name,
    PinCode,
    Port,
    Category,
    Mac,
    SetupId,
    Disabled,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    BridgeId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::hap_accessory::Entity")]
    HapAccessory,
}

// `Related` trait has to be implemented by hand
impl Related<super::hap_accessory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HapAccessory.def()
    }
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::BridgeId => ColumnType::BigInteger.def(),
            Self::Name => ColumnType::String(None).def(),
            Self::Mac => ColumnType::String(None).def(),
            Self::SetupId => ColumnType::String(None).def(),
            Self::Disabled => ColumnType::Boolean.def(),
            Self::PinCode => ColumnType::BigInteger.def(),
            Self::Category => ColumnType::Integer.def(),
            Self::Port => ColumnType::Integer.def(),
        }
    }
}


impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            disabled: Set(false),
            ..<Self as ActiveModelTrait>::default()
        }
    }
}
