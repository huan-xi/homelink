//! `SeaORM` Entity. Generated by sea-orm-hap_metadata 0.11.3

use std::collections::HashMap;
use sea_orm::entity::prelude::*;
use sea_orm::FromJsonQueryResult;
use serde::{Deserialize, Serialize};
use miot_spec::device::ble::value_types::BleValueType;
use miot_spec::device::miot_spec_device::DeviceInfo;
use miot_spec::proto::miio_proto::MiotSpecId;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "iot_device"
    }
}

/// 接入方式
#[derive(EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize, )]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum IotDeviceType {
    /// 米家wifi设备
    MiWifiDevice = 1,
    /// 米家网关设备
    MiGatewayDevice = 2,
    /// 蓝牙设备
    MiBleDevice = 3,
    /// 米家mesh设备
    MiMeshDevice = 4,
    /// 米家Zigbee
    MiZigbeeDevice = 5,
    /// 米家云端设备
    MiCloudDevice = 6,
    // Bl
}

#[derive(EnumIter, DeriveActiveEnum, Copy, Clone, Hash, Debug, PartialEq, Eq, Serialize, Deserialize, )]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum SourceType {
    MiHome = 2
}


#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
#[serde(tag = "type")]
pub enum DeviceParam {
    WifiDeviceParam,
    MiGatewayParam,
    BleParam(BleParam),
    MeshParam(DeviceInfo),
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct MiotSpecIdType {
    pub siid: i32,
    pub piid: i32,
    pub r#type: BleValueType,
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct BleParam {
    /// 设备信息
    #[serde(flatten)]
    pub info: DeviceInfo,
    /// 规则
    pub mapping: Vec<MiotSpecIdType>,
}

impl BleParam {
    pub fn get_mapping(&self) -> bimap::BiMap<MiotSpecId, BleValueType> {
        let mut map = bimap::BiMap::new();
        for item in self.mapping.iter() {
            map.insert(MiotSpecId::new(item.siid, item.piid), item.r#type);
        }
        map
    }
}

#[test]
fn test_ble_param() {
    let str = r#"
    {"did":"blt.3.1g8f9gmps4o02","firmware_revision":null,"localip":null,"mac":"","manufacturer":null,"model":"miaomiaoce.sensor_ht.t1","name":"温湿度传感器","serial_number":null,"software_revision":null,"token":"","type":"BleParam","mapping":[{"siid":2,"piid":1,"type":"Temperature"}]}
    "#;
    let a = serde_json::from_str::<DeviceParam>(str);
    println!("{:?}", a);
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub device_id: i64,
    pub device_type: IotDeviceType,
    pub params: Option<DeviceParam>,
    pub gateway_id: Option<i64>,
    pub name: Option<String>,
    pub memo: Option<String>,
    pub disabled: bool,
    pub source_type: Option<SourceType>,
    pub source_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    DeviceId,
    DeviceType,
    Params,
    GatewayId,
    Disabled,
    Name,
    Memo,
    SourceType,
    SourceId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    DeviceId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::hap_accessory::Entity")]
    HapAccessory,
}

impl Related<super::hap_accessory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HapAccessory.def()
    }
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::DeviceId => ColumnType::BigInteger.def(),
            Self::DeviceType => ColumnType::Integer.def(),
            Self::SourceType => ColumnType::Integer.def(),
            Self::Params => ColumnType::Json.def().null(),
            Self::GatewayId => ColumnType::BigInteger.def().null(),
            Self::Disabled => ColumnType::Boolean.def(),
            Self::Name => ColumnType::String(None).def().null(),
            Self::Memo => ColumnType::String(None).def().null(),
            Self::SourceId => ColumnType::String(None).def().null(),
        }
    }
}


impl ActiveModelBehavior for ActiveModel {}
